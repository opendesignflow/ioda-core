

plugins {
    // OOXOO
    id "org.odfi.ooxoo" version "3.4.4"

    // Publish
    id 'maven-publish'
    id "java-library"

    // Scala
    id 'scala'

    // JFX
    id 'org.openjfx.javafxplugin' version '0.0.9'

}

group = 'org.odfi.ioda'
version = gradle.ext.has("version") ? gradle.ext.version : "dev"

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

// Dependencies
//----------------------

javafx {
    version = "17-ea+6"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics' , 'javafx.media','javafx.web','javafx.swing']
}

def scala_major = "2.13"
def scala_version = gradle.ext.has("scala_version") ?gradle.ext.scala_version :  "$scala_major.5"
dependencies {

//    compile project(":fwapp")
    api project(":ioda-core")
    api project(":ioda-instruments")

    //api "com.kodedu.terminalfx:terminalfx:1.2.0-SNAPSHOT"
    api 'org.controlsfx:controlsfx:11.0.3'

    api 'net.mahdilamb:colormap:0.9.45'

    // https://mvnrepository.com/artifact/org.graalvm.js/js
    api group: 'org.graalvm.js', name: 'js', version: '20.3.0'
    api group: 'org.graalvm.js', name: 'js-scriptengine', version: '20.3.0'

    api("org.scala-lang:scala-library:$scala_version")
   // api("org.scala-lang:scala3-library_3.0.0-M2:3.0.0-M2")

}

publishing {

    publications {

        publishToMavenLocal(MavenPublication) {

            artifactId "ioda-ui"
            from components.java

            pom {
                name = 'IODA UI'
                description = 'Visualizing Helpers for IODA'

                //properties = [ ]
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'richnou'
                        name = 'Richnou'
                        email = 'leys.richard@gmail.com'
                    }
                }

            }
        }

    }
    repositories {
        maven {

            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "https://www.opendesignflow.org/maven/repository/internal/"
            def snapshotsRepoUrl = "https://www.opendesignflow.org/maven/repository/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            // Credentials
            //-------------
            def mavenOdfiPropertiesFile = new File(System.getProperty("user.home") + File.separator + ".gradle/odfi-maven.properties").getCanonicalFile()

            if (mavenOdfiPropertiesFile.exists()) {
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(mavenOdfiPropertiesFile))

                credentials {
                    username keystoreProperties["user"]
                    password keystoreProperties["password"]
                }
            } else {
                credentials {
                    username System.getenv("PUBLISH_USERNAME")
                    password System.getenv("PUBLISH_PASSWORD")
                }
            }
        }
    }
}

repositories {

    mavenLocal()
    mavenCentral()
    maven {
        name = 'Sonatype Nexus Snapshots'
        url = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        name = 'ODFI Releases'
        url = 'https://www.opendesignflow.org/maven/repository/internal/'
    }
    maven {
        name = 'ODFI Snapshots'
        url = 'https://www.opendesignflow.org/maven/repository/snapshots/'
    }
    maven {
        url "https://repo.triplequote.com/libs-release/"
    }
    google()
}